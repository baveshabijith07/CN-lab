TCP Chat:
server:
-------
import socket
host='127.0.0.1'
port=7777
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host, port))
s.listen()
while True:
    conn, addr = s.accept()
    with conn:
        print(f"Connected by {addr}")
        while True:
            data = conn.recv(1024)
            if not data:
                break
            print(f"Received: {data.decode()}")
            response = input("Enter response to send back: ")
            conn.sendall(response.encode())
            if(reponse.lower()=="bye"):
                print("Connection closed")
                break
--------------------------------------------------------------------------
Client:
------
import socket                                                                                                                                                                
host='127.0.0.1'
port=7777
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
    while True:
            message = input("Enter message to send: ")
            s.sendall(message.encode())
            if message.lower() == 'bye':
                print("Connection closed by client.")
                break
            data = s.recv(1024)
            print(f"Received from server: {data.decode()}")
            if data.decode().lower() == 'bye':
                print("Connection closed by server.")
                break
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UDP Chat:
server:
------
import socket
host="127.0.0.1"
port=23456
c=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
c.bind((host,port))
print("Server stared...")
while True:
    data,addr=c.recvfrom(1024)
    msg=data.decode()
    print(f"received:{msg}")
    if msg.lower()=="bye":
        print("connection closed by client")
        break
    res=input("Enter:")
    c.sendto(res.encode(),addr)
c.close()
-----------------------------------------------------------
Client:
-------
import socket
host="127.0.0.1"
port=23456
c=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
while True:
    msg=input("Enter message:")
    c.sendto(msg.encode(),(host,port))
    if msg.lower()=='bye':
        print("Chat finished")
        break
    data,addr=c.recvfrom(1024)
    print(f"data:{data.decode()}")
c.close()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Sliding Window Protocol:
Server:
-------
import socket

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(("localhost", 7777))
server_socket.listen(1)
print("Server started. Waiting for connection...")
connection, address = server_socket.accept()
print("Connection established with:", address)
sbuff = [""] * 8
sptr = 0
sws = 8
with connection:
    while True:
        nf = int(input("Enter the number of frames: "))
        connection.sendall(str(nf).encode())
        if nf < sws:
            for _ in range(nf):
                sbuff[sptr] = input("Enter message: ")
                connection.sendall(sbuff[sptr].encode())
                sptr = (sptr + 1) % 8
            sws -= nf
            connection.recv(1024).decode()
            sws += nf
        else:
            print("The number of frames exceeds window size")
            break
        ch = input("Do you want to send more frames? (yes/no): ")
        connection.sendall(ch.encode())
        if ch.lower() != "yes" and ch.lower() != "y":
            break
---------------------------------------------------------------------------------
Client:
-------
import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("localhost", 7777))
rptr = -1
rws = 8
rbuf = [""] * 8
with s:
    while True:
        nf = int(s.recv(1024).decode())
        if nf < rws:
            for _ in range(nf):
                rptr = (rptr + 1) % 8
                rbuf[rptr] = s.recv(1024).decode()
                print(f"Received Frame {rptr}: {rbuf[rptr]}")
            rws -= nf
            s.sendall(str(rptr + 1).encode())
            rws += nf
        else:
            break
        ch = s.recv(1024).decode()
        if ch.lower() != "yes" and ch.lower() != "y":
            break
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CRC:
def div(n1, n2):
    remainder = ""
    if n1[0] == '0':
        remainder += n1[:len(n2)]
    else:
        for i in range(len(n2)):
            if n1[i] == n2[i]:
                remainder += "0"
            else:
                remainder += "1"

    p = len(n2)
    while p < len(n1):
        remainder = remainder[1:] + n1[p]
        p += 1
        if remainder[0] == '0':
            continue
        result = ""
        for i in range(len(n2)):
            if remainder[i] == n2[i]:
                result += "0"
            else:
                result += "1"
        remainder = result
    return remainder[1:]

gen = input("Enter the Generator: ")
data = input("Enter the Data: ")
code = data
k = len(gen) - 1
for i in range(k):
    code += "0"
code = data + div(code, gen)
print("The transmitted code word is:", code)
rec = input("Please enter the received code word: ")
if int(div(rec, gen)) == 0:
    print("The received code word contains no errors")
else:
    print("The received code word contains errors")
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TCP echo:
server:
-------
import socket
host='127.0.0.1'
port=7777
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host, port))
s.listen()
print(f"Server listening on {host}:{port}")
while True:
    conn, addr = s.accept()
    with conn:
        print(f"Connected by {addr}")
        while True:
            data = conn.recv(1024)
            if not data:
                break
            print(f"Received: {data.decode()}")
            if(data.lower()=="bye"):
                print("Connection closed")
                break
--------------------------------------------------------------------------
Client:
------
import socket                                                                                                                                                                
host='127.0.0.1'
port=7777
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
    while True:
            message = input("Enter message to send: ")
            s.sendall(message.encode())
            if message.lower() == 'bye':
                print("Connection closed by client.")
                break
            if message.decode().lower() == 'bye':
                print("Connection closed by server.")
                break
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UDP echo:
server:
------
import socket
host="127.0.0.1"
port=23456
c=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
c.bind((host,port))
print("Server stared...")
while True:
    data,addr=c.recvfrom(1024)
    msg=data.decode()
    print(f"received:{msg}")
    if msg.lower()=="bye":
        print("connection closed by client")
        break
c.close()
-----------------------------------------------------------
Client:
-------
import socket
host="127.0.0.1"
port=23456
c=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
while True:
    msg=input("Enter message:")
    c.sendto(msg.encode(),(host,port))
    if msg.lower()=='bye':
        print("Chat finished")
        break
c.close()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ARP:
server:
------
import socket
arp_table = {
    "192.168.1.1": "00:0a:95:9d:68:16",
    "192.168.1.2": "00:0a:95:9d:68:17",
    "192.168.1.3": "00:0a:95:9d:68:18"
}
s= socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.bind(("0.0.0.0", 8080))
while True:
    data, address = s.recvfrom(1024)
    ip_address = data.decode()
    mac_address = arp_table.get(ip_address)
    print(f"MAC address: {mac_address}")
    s.sendto(mac_address.encode(), address)
-------------------------------------------------------------
client:
-------
import socket
ip_address=input("Enter IP address: ")
c = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
c.sendto(ip_address.encode(), ("127.0.0.1", 8080))
data, address = c.recvfrom(1024)
mac_address = data.decode()
print(f"MAC address is {mac_address}")
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
RARP:
server:
--------
import socket
rarp_table = {
    "00:0a:95:9d:68:16": "192.168.1.1",
    "00:0a:95:9d:68:17": "192.168.1.2",
    "00:0a:95:9d:68:18": "192.168.1.3"
}
server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
server_socket.bind(("0.0.0.0", 8081))
while True:
    data, address = server_socket.recvfrom(1024)
    mac_address = data.decode()
    ip_address = rarp_table.get(mac_address, "Address not found")
    print(f"Sending IP address: {ip_address}")
    server_socket.sendto(ip_address.encode(), address)
-------------------------------------------------------------
Client:
--------
import socket
mac_address = input("Enter MAC address: ")
client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
client_socket.sendto(mac_address.encode(), ("127.0.0.1", 8081))
data, address = client_socket.recvfrom(1024)
ip_address = data.decode() 
print(f"IP address  is {ip_address}")
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Bellmanford: RIP /distance vector:
#include <stdio.h>
#include <limits.h>
#define MAX_VERTICES 5  // Example: Define the maximum number of vertices
#define MAX_EDGES 7   
void bellmanFord(int graph[MAX_VERTICES][MAX_VERTICES], int num_vertices, int num_edges, int source) {
    int distance[MAX_VERTICES];
    for (int i = 0; i < num_vertices; i++) {
        distance[i] = INT_MAX;
    }
    distance[source] = 0;
    for (int i = 0; i < num_vertices - 1; i++) {
        for (int u = 0; u < num_vertices; u++) {
            for (int v = 0; v < num_vertices; v++) {
                if (graph[u][v] != INT_MAX && distance[u] + graph[u][v] < distance[v]) {
                    distance[v] = distance[u] + graph[u][v];
                }
            }
        }
    }
    for (int u = 0; u < num_vertices; u++) {
        for (int v = 0; v < num_vertices; v++) {
            if (graph[u][v] != INT_MAX && distance[u] + graph[u][v] < distance[v]) {
                printf("Graph contains negative weight cycle\n");
                return;
            }
        }
    }
    printf("Vertex    Distance from Source (%d)\n", source);
    for (int i = 0; i < num_vertices; i++) {
        if (distance[i] == INT_MAX) {
            printf("%d \t\t Infinity\n", i);
        } else {
            printf("%d \t\t %d\n", i, distance[i]);
        }
    }
}
int main() {
    int graph[MAX_VERTICES][MAX_VERTICES] = {
        {0, 5, INT_MAX, 10, INT_MAX},
        {INT_MAX, 0, 3, INT_MAX, INT_MAX},
        {INT_MAX, INT_MAX, 0, 1, INT_MAX},
        {INT_MAX, INT_MAX, INT_MAX, 0, 4},
        {7, INT_MAX, INT_MAX, INT_MAX, 0}
    };
    int num_vertices = MAX_VERTICES;  // Number of vertices in the graph
    int num_edges = MAX_EDGES;        // Number of edges in the graph
    int source = 0;     
    bellmanFord(graph, num_vertices, num_edges, source);
    return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Dijkstra: OSPF/link state routing:

#include <stdio.h>
#define V 4
#define Inf 9999
void dij(int g[V][V], int st) {
    int c[V][V], d[V], vis[V], nextnode, mindistance;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (g[i][j] == 0)
                c[i][j] = Inf;
            else
                c[i][j] = g[i][j];
        }
    }
    for (int i = 0; i < V; i++) {
        d[i] = c[st][i];
        vis[i] = 0;
    }
    d[st] = 0;
    vis[st] = 1;
    int count = 1;
    while (count < V) {
        mindistance = Inf;
        for (int i = 0; i < V; i++)
            if (d[i] < mindistance && !vis[i]) {
                mindistance = d[i];
                nextnode = i;
            }
        vis[nextnode] = 1;
        for (int i = 0; i < V; i++)
            if (!vis[i])
                if (mindistance + c[nextnode][i] < d[i]) {
                    d[i] = mindistance + c[nextnode][i];
                }
        count++;
    }
    for (int i = 0; i < V; i++)
        if (i != st) {
            printf("\nDistance from source to vertex %d: %d", i, d[i]);
        }
    printf("\n");
}
int main() {
    int g[V][V];
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < V; i++) {
        printf("Enter values for vertex %d: ", i);
        for (int j = 0; j < V; j++) {
            scanf("%d", &g[i][j]);
        }
    }
    dij(g, 0);
    return 0;
}
